import React, { useState, useEffect } from 'react';
import { Eye, Target, TrendingUp, Brain, Zap, RotateCcw } from 'lucide-react';

const CascadeSeesaw = () => {
  const [levels, setLevels] = useState([50, 30, 20, 15, 10]);
  const [cascadeInput, setCascadeInput] = useState('');
  const [outcomes, setOutcomes] = useState(['', '', '', '', '']);
  const [isDragging, setIsDragging] = useState(null);

  const steps = [
    {
      title: "INITIAL INSIGHT",
      subtitle: "Cascade Trigger",
      icon: <Eye className="w-5 h-5" />,
      color: "bg-purple-500",
      textColor: "text-purple-400"
    },
    {
      title: "FIRST APPLICATION", 
      subtitle: "Obvious Play",
      icon: <Target className="w-5 h-5" />,
      color: "bg-blue-500",
      textColor: "text-blue-400"
    },
    {
      title: "SECONDARY RIPPLE",
      subtitle: "One Level Deeper", 
      icon: <TrendingUp className="w-5 h-5" />,
      color: "bg-green-500",
      textColor: "text-green-400"
    },
    {
      title: "TERTIARY CASCADE",
      subtitle: "Hidden Connections",
      icon: <Brain className="w-5 h-5" />,
      color: "bg-orange-500", 
      textColor: "text-orange-400"
    },
    {
      title: "FULL COMPLETION",
      subtitle: "Maximum Extraction",
      icon: <Zap className="w-5 h-5" />,
      color: "bg-red-500",
      textColor: "text-red-400"
    }
  ];

  const handleSliderChange = (index, value) => {
    const newLevels = [...levels];
    newLevels[index] = value;
    setLevels(newLevels);
  };

  const handleOutcomeChange = (index, value) => {
    const newOutcomes = [...outcomes];
    newOutcomes[index] = value;
    setOutcomes(newOutcomes);
  };

  const getTotalCompletion = () => {
    return levels.reduce((sum, level) => sum + level, 0);
  };

  const getSeesawAngle = () => {
    const total = getTotalCompletion();
    const balance = (total - 125) / 2; // 125 is middle point (25 * 5)
    return Math.max(-45, Math.min(45, balance * 0.36)); // Cap at ±45 degrees
  };

  const reset = () => {
    setLevels([50, 30, 20, 15, 10]);
    setCascadeInput('');
    setOutcomes(['', '', '', '', '']);
  };

  const autoBalance = () => {
    setLevels([25, 25, 25, 25, 25]);
  };

  const maxOut = () => {
    setLevels([100, 100, 100, 100, 100]);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4">
      <div className="max-w-6xl mx-auto">
        
        {/* Header */}
        <div className="text-center mb-6">
          <h1 className="text-4xl font-bold text-white mb-2">CASCADE COMPLETION SEESAW</h1>
          <p className="text-purple-300 text-lg">Reactive cascade balancing - adjust completion levels in real-time</p>
        </div>

        {/* Input Section */}
        <div className="mb-6 bg-gray-800 rounded-xl p-4 border border-purple-500/30">
          <input
            type="text"
            value={cascadeInput}
            onChange={(e) => setCascadeInput(e.target.value)}
            placeholder="Initial Insight (Cascade Trigger) - e.g., Verstappen's predator laugh = mental dominance activated"
            className="w-full bg-gray-700 text-white rounded-lg px-4 py-3 border border-gray-600 focus:border-purple-500 focus:outline-none transition-colors"
          />
        </div>

        {/* Seesaw Visual */}
        <div className="mb-8 flex justify-center">
          <div className="relative w-96 h-32">
            {/* Fulcrum */}
            <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-8 h-16 bg-gray-600 rounded-t-lg"></div>
            
            {/* Seesaw Plank */}
            <div 
              className="absolute bottom-16 left-1/2 transform -translate-x-1/2 w-80 h-4 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full transition-transform duration-300 origin-center"
              style={{ transform: `translateX(-50%) rotate(${getSeesawAngle()}deg)` }}
            >
              {/* Balance indicator */}
              <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 bg-white rounded-full shadow-lg"></div>
            </div>
            
            {/* Completion Display */}
            <div className="absolute top-0 left-1/2 transform -translate-x-1/2 text-center">
              <div className="text-2xl font-bold text-white">{getTotalCompletion()}%</div>
              <div className="text-sm text-gray-300">Total Completion</div>
            </div>
          </div>
        </div>

        {/* Control Buttons */}
        <div className="flex justify-center space-x-4 mb-8">
          <button
            onClick={reset}
            className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg font-semibold transition-colors duration-300 flex items-center space-x-2"
          >
            <RotateCcw className="w-4 h-4" />
            <span>Reset</span>
          </button>
          <button
            onClick={autoBalance}
            className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-semibold transition-colors duration-300"
          >
            Auto Balance
          </button>
          <button
            onClick={maxOut}
            className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-semibold transition-colors duration-300"
          >
            Max Out
          </button>
        </div>

        {/* Interactive Sliders */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4 mb-8">
          {steps.map((step, index) => (
            <div key={index} className="bg-gray-800 rounded-xl p-4 border border-gray-600">
              <div className="flex items-center space-x-3 mb-3">
                <div className={`${step.color} rounded-full p-2 text-white`}>
                  {step.icon}
                </div>
                <div>
                  <h3 className="text-sm font-bold text-white">{step.title}</h3>
                  <p className="text-xs text-gray-400">{step.subtitle}</p>
                </div>
              </div>
              
              {/* Slider */}
              <div className="mb-3">
                <div className="flex justify-between items-center mb-2">
                  <span className="text-xs text-gray-400">Completion</span>
                  <span className={`text-sm font-bold ${step.textColor}`}>{levels[index]}%</span>
                </div>
                <input
                  type="range"
                  min="0"
                  max="100"
                  value={levels[index]}
                  onChange={(e) => handleSliderChange(index, parseInt(e.target.value))}
                  className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
                  style={{
                    background: `linear-gradient(to right, ${step.color.replace('bg-', '')} 0%, ${step.color.replace('bg-', '')} ${levels[index]}%, #374151 ${levels[index]}%, #374151 100%)`
                  }}
                />
              </div>
              
              {/* Outcome Input */}
              <input
                type="text"
                value={outcomes[index]}
                onChange={(e) => handleOutcomeChange(index, e.target.value)}
                placeholder="Outcome/opportunity..."
                className="w-full bg-gray-700 text-white rounded-lg px-3 py-2 text-xs border border-gray-600 focus:border-purple-500 focus:outline-none transition-colors"
              />
            </div>
          ))}
        </div>

        {/* Completion Summary */}
        {cascadeInput && (
          <div className="bg-gray-800 rounded-xl p-6 border border-green-500/30">
            <h3 className="text-xl font-bold text-white mb-4">Your Cascade Analysis:</h3>
            <div className="space-y-3">
              <div className="text-purple-300">
                <strong>Trigger:</strong> {cascadeInput}
              </div>
              {outcomes.map((outcome, index) => (
                outcome && (
                  <div key={index} className="flex items-center space-x-3">
                    <div className={`w-3 h-3 rounded-full ${steps[index].color}`}></div>
                    <div className="text-gray-300">
                      <strong className="text-white">{steps[index].title} ({levels[index]}%):</strong> {outcome}
                    </div>
                  </div>
                )
              ))}
            </div>
            
            {/* Balance Analysis */}
            <div className="mt-4 p-4 bg-gray-700 rounded-lg">
              <h4 className="font-bold text-white mb-2">Balance Analysis:</h4>
              <div className="text-sm text-gray-300">
                {getTotalCompletion() < 100 && "⚠️ Missing cascade opportunities"}
                {getTotalCompletion() >= 100 && getTotalCompletion() < 300 && "✅ Good cascade awareness"}
                {getTotalCompletion() >= 300 && "🔥 Maximum cascade extraction"}
              </div>
            </div>
          </div>
        )}

        <style jsx>{`
          .slider::-webkit-slider-thumb {
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #ffffff;
            cursor: pointer;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
          }
          
          .slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #ffffff;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
          }
        `}</style>
      </div>
    </div>
  );
};

export default CascadeSeesaw;